/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package practica11smm;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BandCombineOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import java.util.Arrays;
import javax.imageio.ImageIO;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.image.ImageTools;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.jmaf.eventos.LienzoAdapter;
import sm.jmaf.eventos.LienzoEvent;
import sm.jmaf.iu.HerramientaDibujo;
import static sm.jmaf.iu.HerramientaDibujo.ELIPSE;
import static sm.jmaf.iu.HerramientaDibujo.FANTASMA;
import static sm.jmaf.iu.HerramientaDibujo.LINEA;
import static sm.jmaf.iu.HerramientaDibujo.RECTANGULO;
import sm.jmaf.iu.Lienzo2D;

/**
 *
 * @author juanmaaf
 */
public class VentanaPrincipal extends javax.swing.JFrame {
    
    private String texto_barra_estado;
    private BufferedImage imgFuente;
    private float factor_brillo = 0.0f;
    private float factor_contraste = 1.0f;
    private ManejadorVentanaInterna manejador_ventana_interna;
    private MiManejadorLienzo manejador = new MiManejadorLienzo();

    
    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        
        texto_barra_estado = "";
        
        manejador_ventana_interna = new ManejadorVentanaInterna();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        modo_dibujo = new javax.swing.ButtonGroup();
        barra_herramientas = new javax.swing.JToolBar();
        boton_nuevo = new javax.swing.JButton();
        boton_abrir = new javax.swing.JButton();
        boton_guardar = new javax.swing.JButton();
        boton_duplicar = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        boton_linea = new javax.swing.JToggleButton();
        boton_rectangulo = new javax.swing.JToggleButton();
        boton_elipse = new javax.swing.JToggleButton();
        boton_fantasma = new javax.swing.JToggleButton();
        boton_edicion = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        panel_color = new javax.swing.JPanel();
        boton_color = new javax.swing.JButton();
        boton_rellenar = new javax.swing.JToggleButton();
        boton_transparencia = new javax.swing.JToggleButton();
        boton_alisado = new javax.swing.JToggleButton();
        slider_grosor = new javax.swing.JSlider();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        boton_volcado = new javax.swing.JButton();
        escritorio = new javax.swing.JDesktopPane();
        panel_inferior = new javax.swing.JPanel();
        barra_estado = new javax.swing.JLabel();
        barra_herramientas_inferior = new javax.swing.JToolBar();
        label_brillo = new javax.swing.JLabel();
        brillo = new javax.swing.JSlider();
        label_contraste = new javax.swing.JLabel();
        contraste = new javax.swing.JSlider();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        lista_filtros = new javax.swing.JComboBox<>();
        label_cometa = new javax.swing.JLabel();
        cometa = new javax.swing.JSlider();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        boton_negativo = new javax.swing.JButton();
        boton_contraste_normal = new javax.swing.JButton();
        boton_contraste_iluminado = new javax.swing.JButton();
        boton_contraste_oscurecido = new javax.swing.JButton();
        boton_oscurecer_zonas_claras = new javax.swing.JButton();
        label_transformacion_lineal = new javax.swing.JLabel();
        transformacion_lineal = new javax.swing.JSlider();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        boton_rotacion = new javax.swing.JButton();
        boton_incrementar_escalado = new javax.swing.JButton();
        boton_reducir_escalado = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        boton_mostrar_bandas = new javax.swing.JButton();
        lista_espacio_color = new javax.swing.JComboBox<>();
        jSeparator8 = new javax.swing.JToolBar.Separator();
        boton_combinar_bandas = new javax.swing.JButton();
        menu_superior = new javax.swing.JMenuBar();
        menu_archivo = new javax.swing.JMenu();
        nuevo = new javax.swing.JMenuItem();
        abrir = new javax.swing.JMenuItem();
        guardar = new javax.swing.JMenuItem();
        menu_imagen = new javax.swing.JMenu();
        rescale_op = new javax.swing.JMenuItem();
        convolve_op = new javax.swing.JMenuItem();
        affine_transform_op = new javax.swing.JMenuItem();
        lookup_op = new javax.swing.JMenuItem();
        band_combine_op = new javax.swing.JMenuItem();
        color_convert_op = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Paint BÃ¡sico");

        barra_herramientas.setRollover(true);

        boton_nuevo.setIcon(new javax.swing.ImageIcon("/home/juanmaaf/NetBeansProjects/Practica8SMM/iconos/nuevo.png")); // NOI18N
        boton_nuevo.setFocusable(false);
        boton_nuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton_nuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton_nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_nuevoActionPerformed(evt);
            }
        });
        barra_herramientas.add(boton_nuevo);

        boton_abrir.setIcon(new javax.swing.ImageIcon("/home/juanmaaf/NetBeansProjects/Practica8SMM/iconos/abrir.png")); // NOI18N
        boton_abrir.setFocusable(false);
        boton_abrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton_abrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton_abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_abrirActionPerformed(evt);
            }
        });
        barra_herramientas.add(boton_abrir);

        boton_guardar.setIcon(new javax.swing.ImageIcon("/home/juanmaaf/NetBeansProjects/Practica8SMM/iconos/guardar.png")); // NOI18N
        boton_guardar.setFocusable(false);
        boton_guardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton_guardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_guardarActionPerformed(evt);
            }
        });
        barra_herramientas.add(boton_guardar);

        boton_duplicar.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        boton_duplicar.setText("X2");
        boton_duplicar.setFocusable(false);
        boton_duplicar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton_duplicar.setPreferredSize(new java.awt.Dimension(32, 30));
        boton_duplicar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton_duplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_duplicarActionPerformed(evt);
            }
        });
        barra_herramientas.add(boton_duplicar);
        barra_herramientas.add(jSeparator2);

        modo_dibujo.add(boton_linea);
        boton_linea.setIcon(new javax.swing.ImageIcon("/home/juanmaaf/NetBeansProjects/Practica4SMM/iconos/linea.png")); // NOI18N
        boton_linea.setFocusable(false);
        boton_linea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton_linea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton_linea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_lineaActionPerformed(evt);
            }
        });
        barra_herramientas.add(boton_linea);

        modo_dibujo.add(boton_rectangulo);
        boton_rectangulo.setIcon(new javax.swing.ImageIcon("/home/juanmaaf/NetBeansProjects/Practica4SMM/iconos/rectangulo.png")); // NOI18N
        boton_rectangulo.setFocusable(false);
        boton_rectangulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton_rectangulo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton_rectangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_rectanguloActionPerformed(evt);
            }
        });
        barra_herramientas.add(boton_rectangulo);

        modo_dibujo.add(boton_elipse);
        boton_elipse.setIcon(new javax.swing.ImageIcon("/home/juanmaaf/NetBeansProjects/Practica4SMM/iconos/elipse.png")); // NOI18N
        boton_elipse.setFocusable(false);
        boton_elipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton_elipse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton_elipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_elipseActionPerformed(evt);
            }
        });
        barra_herramientas.add(boton_elipse);

        modo_dibujo.add(boton_fantasma);
        boton_fantasma.setIcon(new javax.swing.ImageIcon("/home/juanmaaf/NetBeansProjects/Practica7SMM/iconos/fantasma.png")); // NOI18N
        boton_fantasma.setFocusable(false);
        boton_fantasma.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton_fantasma.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton_fantasma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_fantasmaActionPerformed(evt);
            }
        });
        barra_herramientas.add(boton_fantasma);

        modo_dibujo.add(boton_edicion);
        boton_edicion.setIcon(new javax.swing.ImageIcon("/home/juanmaaf/NetBeansProjects/Practica7SMM/iconos/seleccion.png")); // NOI18N
        boton_edicion.setFocusable(false);
        boton_edicion.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton_edicion.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton_edicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_edicionActionPerformed(evt);
            }
        });
        barra_herramientas.add(boton_edicion);
        barra_herramientas.add(jSeparator1);

        panel_color.setPreferredSize(new java.awt.Dimension(34, 32));
        panel_color.setLayout(new java.awt.BorderLayout());

        boton_color.setBackground(new java.awt.Color(0, 0, 0));
        boton_color.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_colorActionPerformed(evt);
            }
        });
        panel_color.add(boton_color, java.awt.BorderLayout.CENTER);

        barra_herramientas.add(panel_color);

        boton_rellenar.setIcon(new javax.swing.ImageIcon("/home/juanmaaf/NetBeansProjects/Practica7SMM/iconos/rellenar.png")); // NOI18N
        boton_rellenar.setFocusable(false);
        boton_rellenar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton_rellenar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton_rellenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_rellenarActionPerformed(evt);
            }
        });
        barra_herramientas.add(boton_rellenar);

        boton_transparencia.setIcon(new javax.swing.ImageIcon("/home/juanmaaf/NetBeansProjects/Practica7SMM/iconos/transparencia.png")); // NOI18N
        boton_transparencia.setFocusable(false);
        boton_transparencia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton_transparencia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton_transparencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_transparenciaActionPerformed(evt);
            }
        });
        barra_herramientas.add(boton_transparencia);

        boton_alisado.setIcon(new javax.swing.ImageIcon("/home/juanmaaf/NetBeansProjects/Practica7SMM/iconos/alisar.png")); // NOI18N
        boton_alisado.setFocusable(false);
        boton_alisado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton_alisado.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton_alisado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_alisadoActionPerformed(evt);
            }
        });
        barra_herramientas.add(boton_alisado);

        slider_grosor.setMaximum(20);
        slider_grosor.setValue(5);
        slider_grosor.setPreferredSize(new java.awt.Dimension(50, 20));
        slider_grosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_grosorStateChanged(evt);
            }
        });
        barra_herramientas.add(slider_grosor);
        barra_herramientas.add(jSeparator3);

        boton_volcado.setIcon(new javax.swing.ImageIcon("/home/juanmaaf/NetBeansProjects/Practica8SMM/iconos/volcado.png")); // NOI18N
        boton_volcado.setFocusable(false);
        boton_volcado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton_volcado.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton_volcado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_volcadoActionPerformed(evt);
            }
        });
        barra_herramientas.add(boton_volcado);

        getContentPane().add(barra_herramientas, java.awt.BorderLayout.PAGE_START);

        escritorio.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 923, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 679, Short.MAX_VALUE)
        );

        getContentPane().add(escritorio, java.awt.BorderLayout.CENTER);

        panel_inferior.setLayout(new java.awt.BorderLayout());

        barra_estado.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        barra_estado.setText("Barra de Estado");
        barra_estado.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panel_inferior.add(barra_estado, java.awt.BorderLayout.PAGE_END);

        barra_herramientas_inferior.setRollover(true);
        barra_herramientas_inferior.setPreferredSize(new java.awt.Dimension(874, 39));

        label_brillo.setIcon(new javax.swing.ImageIcon("/home/juanmaaf/NetBeansProjects/Practica9SMM/iconos/brillo.png")); // NOI18N
        barra_herramientas_inferior.add(label_brillo);

        brillo.setMaximum(255);
        brillo.setMinimum(-255);
        brillo.setValue(0);
        brillo.setPreferredSize(new java.awt.Dimension(50, 20));
        brillo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                brilloStateChanged(evt);
            }
        });
        brillo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                brilloFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                brilloFocusLost(evt);
            }
        });
        barra_herramientas_inferior.add(brillo);

        label_contraste.setIcon(new javax.swing.ImageIcon("/home/juanmaaf/NetBeansProjects/Practica9SMM/iconos/contraste.png")); // NOI18N
        barra_herramientas_inferior.add(label_contraste);

        contraste.setMaximum(20);
        contraste.setMinimum(1);
        contraste.setValue(10);
        contraste.setPreferredSize(new java.awt.Dimension(50, 20));
        contraste.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                contrasteStateChanged(evt);
            }
        });
        contraste.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                contrasteFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                contrasteFocusLost(evt);
            }
        });
        barra_herramientas_inferior.add(contraste);
        barra_herramientas_inferior.add(jSeparator4);

        lista_filtros.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Detector de Fronteras Laplaciano", "Media MÃ¡scara 5x5", "Media MÃ¡scara 7x7", "Emborronamiento Iluminado", "Emborronamiento Iluminado 5x5" }));
        lista_filtros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lista_filtrosActionPerformed(evt);
            }
        });
        barra_herramientas_inferior.add(lista_filtros);

        label_cometa.setIcon(new javax.swing.ImageIcon("/home/juanmaaf/NetBeansProjects/Practica9SMM/iconos/cometa.png")); // NOI18N
        barra_herramientas_inferior.add(label_cometa);

        cometa.setMaximum(15);
        cometa.setMinimum(3);
        cometa.setValue(3);
        cometa.setPreferredSize(new java.awt.Dimension(50, 20));
        cometa.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cometaStateChanged(evt);
            }
        });
        cometa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cometaFocusLost(evt);
            }
        });
        barra_herramientas_inferior.add(cometa);
        barra_herramientas_inferior.add(jSeparator5);

        boton_negativo.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        boton_negativo.setText("-1");
        boton_negativo.setFocusable(false);
        boton_negativo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton_negativo.setPreferredSize(new java.awt.Dimension(32, 32));
        boton_negativo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton_negativo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_negativoActionPerformed(evt);
            }
        });
        barra_herramientas_inferior.add(boton_negativo);

        boton_contraste_normal.setIcon(new javax.swing.ImageIcon("/home/juanmaaf/NetBeansProjects/Practica10SMM/iconos/contraste2.png")); // NOI18N
        boton_contraste_normal.setFocusable(false);
        boton_contraste_normal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton_contraste_normal.setPreferredSize(new java.awt.Dimension(34, 32));
        boton_contraste_normal.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton_contraste_normal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_contraste_normalActionPerformed(evt);
            }
        });
        barra_herramientas_inferior.add(boton_contraste_normal);

        boton_contraste_iluminado.setIcon(new javax.swing.ImageIcon("/home/juanmaaf/NetBeansProjects/Practica10SMM/iconos/iluminar.png")); // NOI18N
        boton_contraste_iluminado.setFocusable(false);
        boton_contraste_iluminado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton_contraste_iluminado.setPreferredSize(new java.awt.Dimension(34, 32));
        boton_contraste_iluminado.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton_contraste_iluminado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_contraste_iluminadoActionPerformed(evt);
            }
        });
        barra_herramientas_inferior.add(boton_contraste_iluminado);

        boton_contraste_oscurecido.setIcon(new javax.swing.ImageIcon("/home/juanmaaf/NetBeansProjects/Practica10SMM/iconos/ocurecer.png")); // NOI18N
        boton_contraste_oscurecido.setFocusable(false);
        boton_contraste_oscurecido.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton_contraste_oscurecido.setPreferredSize(new java.awt.Dimension(34, 32));
        boton_contraste_oscurecido.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton_contraste_oscurecido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_contraste_oscurecidoActionPerformed(evt);
            }
        });
        barra_herramientas_inferior.add(boton_contraste_oscurecido);

        boton_oscurecer_zonas_claras.setIcon(new javax.swing.ImageIcon("/home/juanmaaf/NetBeansProjects/Practica10SMM/iconos/operador1.png")); // NOI18N
        boton_oscurecer_zonas_claras.setFocusable(false);
        boton_oscurecer_zonas_claras.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton_oscurecer_zonas_claras.setPreferredSize(new java.awt.Dimension(34, 32));
        boton_oscurecer_zonas_claras.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton_oscurecer_zonas_claras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_oscurecer_zonas_clarasActionPerformed(evt);
            }
        });
        barra_herramientas_inferior.add(boton_oscurecer_zonas_claras);

        label_transformacion_lineal.setIcon(new javax.swing.ImageIcon("/home/juanmaaf/NetBeansProjects/Practica10SMM/iconos/operador2.png")); // NOI18N
        barra_herramientas_inferior.add(label_transformacion_lineal);

        transformacion_lineal.setMaximum(255);
        transformacion_lineal.setValue(128);
        transformacion_lineal.setPreferredSize(new java.awt.Dimension(50, 20));
        transformacion_lineal.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                transformacion_linealStateChanged(evt);
            }
        });
        transformacion_lineal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                transformacion_linealFocusLost(evt);
            }
        });
        barra_herramientas_inferior.add(transformacion_lineal);
        barra_herramientas_inferior.add(jSeparator6);

        boton_rotacion.setIcon(new javax.swing.ImageIcon("/home/juanmaaf/NetBeansProjects/Practica10SMM/iconos/rotar180.png")); // NOI18N
        boton_rotacion.setFocusable(false);
        boton_rotacion.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton_rotacion.setPreferredSize(new java.awt.Dimension(34, 32));
        boton_rotacion.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton_rotacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_rotacionActionPerformed(evt);
            }
        });
        barra_herramientas_inferior.add(boton_rotacion);

        boton_incrementar_escalado.setIcon(new javax.swing.ImageIcon("/home/juanmaaf/NetBeansProjects/Practica10SMM/iconos/mas.png")); // NOI18N
        boton_incrementar_escalado.setFocusable(false);
        boton_incrementar_escalado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton_incrementar_escalado.setPreferredSize(new java.awt.Dimension(34, 32));
        boton_incrementar_escalado.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton_incrementar_escalado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_incrementar_escaladoActionPerformed(evt);
            }
        });
        barra_herramientas_inferior.add(boton_incrementar_escalado);

        boton_reducir_escalado.setIcon(new javax.swing.ImageIcon("/home/juanmaaf/NetBeansProjects/Practica10SMM/iconos/menos.png")); // NOI18N
        boton_reducir_escalado.setFocusable(false);
        boton_reducir_escalado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton_reducir_escalado.setPreferredSize(new java.awt.Dimension(34, 32));
        boton_reducir_escalado.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton_reducir_escalado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_reducir_escaladoActionPerformed(evt);
            }
        });
        barra_herramientas_inferior.add(boton_reducir_escalado);
        barra_herramientas_inferior.add(jSeparator7);

        boton_mostrar_bandas.setIcon(new javax.swing.ImageIcon("/home/juanmaaf/NetBeansProjects/Practica11SMM/iconos/bandas.png")); // NOI18N
        boton_mostrar_bandas.setFocusable(false);
        boton_mostrar_bandas.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton_mostrar_bandas.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton_mostrar_bandas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_mostrar_bandasActionPerformed(evt);
            }
        });
        barra_herramientas_inferior.add(boton_mostrar_bandas);

        lista_espacio_color.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "RGB", "YCC", "GREY" }));
        lista_espacio_color.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lista_espacio_colorActionPerformed(evt);
            }
        });
        barra_herramientas_inferior.add(lista_espacio_color);
        barra_herramientas_inferior.add(jSeparator8);

        boton_combinar_bandas.setIcon(new javax.swing.ImageIcon("/home/juanmaaf/NetBeansProjects/Practica11SMM/iconos/combinar.png")); // NOI18N
        boton_combinar_bandas.setFocusable(false);
        boton_combinar_bandas.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton_combinar_bandas.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton_combinar_bandas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_combinar_bandasActionPerformed(evt);
            }
        });
        barra_herramientas_inferior.add(boton_combinar_bandas);

        panel_inferior.add(barra_herramientas_inferior, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(panel_inferior, java.awt.BorderLayout.PAGE_END);

        menu_archivo.setText("Archivo");

        nuevo.setText("Nuevo");
        nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoActionPerformed(evt);
            }
        });
        menu_archivo.add(nuevo);

        abrir.setText("Abrir");
        abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirActionPerformed(evt);
            }
        });
        menu_archivo.add(abrir);

        guardar.setText("Guardar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });
        menu_archivo.add(guardar);

        menu_superior.add(menu_archivo);

        menu_imagen.setText("Imagen");

        rescale_op.setText("RescaleOp");
        rescale_op.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rescale_opActionPerformed(evt);
            }
        });
        menu_imagen.add(rescale_op);

        convolve_op.setText("ConvolveOp");
        convolve_op.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convolve_opActionPerformed(evt);
            }
        });
        menu_imagen.add(convolve_op);

        affine_transform_op.setText("AffineTransformOp");
        affine_transform_op.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                affine_transform_opActionPerformed(evt);
            }
        });
        menu_imagen.add(affine_transform_op);

        lookup_op.setText("LookupOp");
        lookup_op.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lookup_opActionPerformed(evt);
            }
        });
        menu_imagen.add(lookup_op);

        band_combine_op.setText("BandCombineOp");
        band_combine_op.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                band_combine_opActionPerformed(evt);
            }
        });
        menu_imagen.add(band_combine_op);

        color_convert_op.setText("ColorConvertOp");
        color_convert_op.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                color_convert_opActionPerformed(evt);
            }
        });
        menu_imagen.add(color_convert_op);

        menu_superior.add(menu_imagen);

        setJMenuBar(menu_superior);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirActionPerformed
        // TODO add your handling code here:
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                BufferedImage img = ImageIO.read(f);
                VentanaInterna vi = new VentanaInterna();
                vi.getLienzo2D().setImage(img);
                this.escritorio.add(vi);
                vi.setTitle(f.getName());
                vi.setVisible(true);
            }catch(Exception ex){
                System.err.println("Error al leer la imagen");
            }
        }
    }//GEN-LAST:event_abrirActionPerformed

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi=(VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getPaintedImage();
            if (img != null) {
                JFileChooser dlg = new JFileChooser();
                FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos de imagen", "jpg", "png"); // Filtra por tipos de imagen comunes
                dlg.setFileFilter(filter);

                int resp = dlg.showSaveDialog(this);
                if (resp == JFileChooser.APPROVE_OPTION) {
                    try {
                        File f = dlg.getSelectedFile();
                        String ext = "";
                        String fileName = f.getName();
                        int i = fileName.lastIndexOf('.');
                        if (i > 0 && i < fileName.length() - 1) {
                            ext = fileName.substring(i + 1).toLowerCase(); // Obtener la extensiÃ³n del archivo seleccionado
                        }
                        // Verificar si la extensiÃ³n coincide con la de los formatos que soportan canal alfa
                        if (ext.equals("png")) {
                            ImageIO.write(img, ext, f); // Utilizar la extensiÃ³n PNG
                        } else {
                            // Si la extensiÃ³n no es compatible con canal alfa, guardamos como JPG
                            ImageIO.write(img, "jpg", f);
                        }
                        vi.setTitle(f.getName());
                    } catch (Exception ex) {
                        System.err.println("Error al guardar la imagen");
                    }
                }
            }
        }
    }//GEN-LAST:event_guardarActionPerformed

    private void nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = new VentanaInterna();
        escritorio.add(vi);
        vi.setVisible(true);
        BufferedImage img;
        img = new BufferedImage(300,300,BufferedImage.TYPE_INT_ARGB);
        
        Graphics2D g2d = img.createGraphics();
        g2d.setColor(Color.WHITE); // Establecer el color de fondo blanco
        g2d.fillRect(0, 0, img.getWidth(), img.getHeight());
        
        // Dibujar el marco alrededor de la imagen
        g2d.setColor(Color.BLACK);
        g2d.drawRect(0, 0, img.getWidth() - 1, img.getHeight() - 1);
        
        vi.getLienzo2D().setImage(img);
        
        vi.addInternalFrameListener(manejador_ventana_interna);
        vi.getLienzo2D().addLienzoListener(manejador);
    }//GEN-LAST:event_nuevoActionPerformed

    private void boton_rectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_rectanguloActionPerformed
        // TODO add your handling code here:
        if(boton_rectangulo.isSelected()){
            Lienzo2D lienzo = getSelectedLienzo();
            
            if(lienzo != null){
                lienzo.setHerramienta(HerramientaDibujo.RECTANGULO);
                barra_estado.setText("Modo RectÃ¡ngulo");
                texto_barra_estado = "Modo RectÃ¡ngulo. ";
                lienzo.setModo_edicion(boton_edicion.isSelected());
            }
        }
    }//GEN-LAST:event_boton_rectanguloActionPerformed

    private void boton_lineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_lineaActionPerformed
        // TODO add your handling code here:
        if(boton_linea.isSelected()){
            Lienzo2D lienzo = getSelectedLienzo();
            
            if(lienzo != null){
                lienzo.setHerramienta(HerramientaDibujo.LINEA);
                barra_estado.setText("Modo LÃ­nea");
                texto_barra_estado = "Modo LÃ­nea. ";
                lienzo.setModo_edicion(boton_edicion.isSelected());
            }
        }
    }//GEN-LAST:event_boton_lineaActionPerformed

    private void boton_elipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_elipseActionPerformed
        // TODO add your handling code here:
        if(boton_elipse.isSelected()){
            Lienzo2D lienzo = getSelectedLienzo();
            
            if(lienzo != null){
                lienzo.setHerramienta(HerramientaDibujo.ELIPSE);
                barra_estado.setText("Modo Elipse");
                texto_barra_estado = "Modo Elipse. ";
                lienzo.setModo_edicion(boton_edicion.isSelected());
            }
        }
    }//GEN-LAST:event_boton_elipseActionPerformed

    private void boton_fantasmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_fantasmaActionPerformed
        // TODO add your handling code here:.
        if(boton_fantasma.isSelected()){
            Lienzo2D lienzo = getSelectedLienzo();
            
            if(lienzo != null){
                lienzo.setHerramienta(HerramientaDibujo.FANTASMA);
                barra_estado.setText("Modo Fantasma");
                texto_barra_estado = "Modo Fantasma ";
                lienzo.setModo_edicion(boton_edicion.isSelected());
            }
        }
    }//GEN-LAST:event_boton_fantasmaActionPerformed

    private void boton_edicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_edicionActionPerformed
        // TODO add your handling code here:
        Lienzo2D lienzo = getSelectedLienzo();
            
        if(lienzo != null){
            lienzo.setModo_edicion(boton_edicion.isSelected());
        }
    }//GEN-LAST:event_boton_edicionActionPerformed

    private void boton_colorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_colorActionPerformed
        // TODO add your handling code here:
        Lienzo2D lienzo = getSelectedLienzo();
        
        if(lienzo != null){
            Color color = JColorChooser.showDialog(this, "Elije un color", Color.BLACK);
            lienzo.setColor(color);
            boton_color.setBackground(color);
        }
    }//GEN-LAST:event_boton_colorActionPerformed

    private void boton_rellenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_rellenarActionPerformed
        // TODO add your handling code here:
        Lienzo2D lienzo = getSelectedLienzo();
            
        if(lienzo != null){
            lienzo.setRelleno(boton_rellenar.isSelected());
        }
    }//GEN-LAST:event_boton_rellenarActionPerformed

    private void boton_transparenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_transparenciaActionPerformed
        // TODO add your handling code here:
        Lienzo2D lienzo = getSelectedLienzo();
            
        if(lienzo != null){
            lienzo.setModo_transparencia(boton_transparencia.isSelected());
        }
    }//GEN-LAST:event_boton_transparenciaActionPerformed

    private void boton_alisadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_alisadoActionPerformed
        // TODO add your handling code here:
        Lienzo2D lienzo = getSelectedLienzo();
            
        if(lienzo != null){
            lienzo.setModo_alisado(boton_alisado.isSelected());
        }
    }//GEN-LAST:event_boton_alisadoActionPerformed

    private void slider_grosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_grosorStateChanged
        // TODO add your handling code here:
        Lienzo2D lienzo = getSelectedLienzo();
            
        if(lienzo != null){
            lienzo.setGrosor(slider_grosor.getValue());
        }
    }//GEN-LAST:event_slider_grosorStateChanged

    private void boton_nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_nuevoActionPerformed
        // TODO add your handling code here:
        nuevoActionPerformed(evt);
    }//GEN-LAST:event_boton_nuevoActionPerformed

    private void boton_abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_abrirActionPerformed
        // TODO add your handling code here:
        abrirActionPerformed(evt);
    }//GEN-LAST:event_boton_abrirActionPerformed

    private void boton_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_guardarActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        guardarActionPerformed(evt);
    }//GEN-LAST:event_boton_guardarActionPerformed

    private void boton_volcadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_volcadoActionPerformed
        // TODO add your handling code here:
        Lienzo2D lienzo = getSelectedLienzo();
        
        if(lienzo != null){
            lienzo.volcarFigura();
        }
    }//GEN-LAST:event_boton_volcadoActionPerformed

    private void rescale_opActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rescale_opActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if(img!=null){
                try{
                    RescaleOp rop = new RescaleOp(factor_contraste, factor_brillo, null);
                    rop.filter(imgFuente, vi.getLienzo2D().getImage());
                    vi.getLienzo2D().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_rescale_opActionPerformed

    private void convolve_opActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convolve_opActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if(img!=null){
                try{
                    float filtro[] = {0.1f, 0.1f, 0.1f, 0.1f, 0.2f, 0.1f,0.1f, 0.1f, 0.1f};
                    Kernel k = new Kernel(3, 3, filtro);
                    ConvolveOp cop = new ConvolveOp(k);
                    BufferedImage imgdest = cop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_convolve_opActionPerformed

    private void brilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_brilloStateChanged
        // TODO add your handling code here:
        factor_brillo = brillo.getValue();
        
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null && imgFuente != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if(img!=null){
                try{
                    RescaleOp rop = new RescaleOp(1.0F, factor_brillo, null);
                    rop.filter(imgFuente, vi.getLienzo2D().getImage());
                    //vi.getLienzo2D().repaint();
                    escritorio.repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_brilloStateChanged

    private void contrasteStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_contrasteStateChanged
        // TODO add your handling code here:
        factor_contraste = contraste.getValue()/10.0f;
        
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null && imgFuente != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if(img!=null){
                try{
                    RescaleOp rop = new RescaleOp(factor_contraste, 0.0F, null);
                    rop.filter(imgFuente, vi.getLienzo2D().getImage());
                    //vi.getLienzo2D().repaint();
                    escritorio.repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_contrasteStateChanged

    private void brilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloFocusGained
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna)(escritorio.getSelectedFrame());
        if(vi!=null){
            ColorModel cm = vi.getLienzo2D().getImage().getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImage().copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImage().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm,raster,alfaPre,null);
        }
    }//GEN-LAST:event_brilloFocusGained

    private void brilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloFocusLost
        // TODO add your handling code here:
        imgFuente = null;
        brillo.setValue(0);
    }//GEN-LAST:event_brilloFocusLost

    private void contrasteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_contrasteFocusGained
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna)(escritorio.getSelectedFrame());
        if(vi!=null){
            ColorModel cm = vi.getLienzo2D().getImage().getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImage().copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImage().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm,raster,alfaPre,null);
        }
    }//GEN-LAST:event_contrasteFocusGained

    private void contrasteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_contrasteFocusLost
        // TODO add your handling code here:
        imgFuente = null;
        contraste.setValue(10);
    }//GEN-LAST:event_contrasteFocusLost

    private void affine_transform_opActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_affine_transform_opActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if(img!=null){
                try{
                    AffineTransform at = AffineTransform.getScaleInstance(1.5,1.5);
                    //AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(10), img.getWidth()/2, img.getHeight()/2);
                    //AffineTransform at = AffineTransform.getShearInstance(0.5, 0.0);
                    
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_affine_transform_opActionPerformed

    private void lookup_opActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lookup_opActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            img = ImageTools.convertImageType(img, BufferedImage.TYPE_INT_ARGB);
            if(img!=null){
                try{
                    byte funcionT[] = new byte[256];
                    for (int x=0; x<256; x++)
                        funcionT[x] = (byte)(255-x); // Negativo
                    LookupTable tabla = new ByteLookupTable(0, funcionT);
                    LookupOp lop = new LookupOp(tabla, null);
                    BufferedImage imgdest = lop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_lookup_opActionPerformed

    private void lista_filtrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lista_filtrosActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        
        int seleccion = lista_filtros.getSelectedIndex();
        Kernel k = getKernel(seleccion);
        
        if (vi != null && k != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if(img!=null){
                try{
                    ConvolveOp cop = new ConvolveOp(k,ConvolveOp.EDGE_NO_OP,null);
                    BufferedImage imgdest = cop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_lista_filtrosActionPerformed

    private void cometaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cometaStateChanged
        // TODO add your handling code here:
        int tam_mascara = cometa.getValue();
        
        float[] filtro = crearFiltroCometa(tam_mascara);
        System.out.println("MÃ¡scara aplicada: " + tam_mascara);

        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    Kernel k = new Kernel(tam_mascara, 1, filtro);
                    ConvolveOp cop = new ConvolveOp(k, ConvolveOp.EDGE_NO_OP, null);
                    BufferedImage imgdest = cop.filter(img, null);

                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_cometaStateChanged

    private void cometaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cometaFocusLost
        // TODO add your handling code here:
        cometa.setValue(3);
    }//GEN-LAST:event_cometaFocusLost

    private void boton_contraste_normalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_contraste_normalActionPerformed
        // TODO add your handling code here:
        LookupTable tabla = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);
        aplicar_lookup_contraste(tabla);
    }//GEN-LAST:event_boton_contraste_normalActionPerformed

    private void boton_contraste_iluminadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_contraste_iluminadoActionPerformed
        // TODO add your handling code here:
        LookupTable tabla = LookupTableProducer.logarithmFuction();
        aplicar_lookup_contraste(tabla);
    }//GEN-LAST:event_boton_contraste_iluminadoActionPerformed

    private void boton_contraste_oscurecidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_contraste_oscurecidoActionPerformed
        // TODO add your handling code here:
        LookupTable tabla = LookupTableProducer.powerFuction(5);
        aplicar_lookup_contraste(tabla);
    }//GEN-LAST:event_boton_contraste_oscurecidoActionPerformed

    private void boton_rotacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_rotacionActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if(img!=null){
                try{
                    AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(180), img.getWidth()/2, img.getHeight()/2);
                    
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_boton_rotacionActionPerformed

    private void boton_incrementar_escaladoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_incrementar_escaladoActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if(img!=null){
                try{
                    AffineTransform at = AffineTransform.getScaleInstance(1.25,1.25);
                    
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_boton_incrementar_escaladoActionPerformed

    private void boton_reducir_escaladoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_reducir_escaladoActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if(img!=null){
                try{
                    AffineTransform at = AffineTransform.getScaleInstance(0.75, 0.75);
                    
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_boton_reducir_escaladoActionPerformed

    private void transformacion_linealStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_transformacion_linealStateChanged
        // TODO add your handling code here:
        // Un valor mÃ¡s alto de a aumentarÃ¡ el contraste en los pÃ­xeles mÃ¡s claros de la imagen, 
        // mientras que un valor mÃ¡s bajo de a aumentarÃ¡ el contraste en los pÃ­xeles mÃ¡s oscuros.
        
        int a = transformacion_lineal.getValue();
        
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            img = ImageTools.convertImageType(img, BufferedImage.TYPE_INT_ARGB);
            if(img!=null){
                try{
                    byte funcionT[] = new byte[256];
                    for (int x=0; x<256; x++){
                        if(x < 128){
                            funcionT[x] = (byte) (a*x/128);
                        }
                        else{
                            funcionT[x] = (byte) ((255-a)*(x-128)/127 + a);
                        }
                    }
                    
                    LookupTable tabla = new ByteLookupTable(0, funcionT);
                    LookupOp lop = new LookupOp(tabla, null);
                    BufferedImage imgdest = lop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_transformacion_linealStateChanged

    private void transformacion_linealFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_transformacion_linealFocusLost
        // TODO add your handling code here:
        transformacion_lineal.setValue(128);
    }//GEN-LAST:event_transformacion_linealFocusLost

    private void boton_oscurecer_zonas_clarasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_oscurecer_zonas_clarasActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            img = ImageTools.convertImageType(img, BufferedImage.TYPE_INT_ARGB);
            if(img!=null){
                try{
                    byte funcionT[] = new byte[256];
                    for (int x = 0; x < 256; x++) {
                        if (x < 128) {
                            // Mantener las zonas oscuras iguales
                            funcionT[x] = (byte) x;
                        } else {
                            // Oscurecer las zonas claras
                            //-95.483 hace que la funciÃ³n sea contÃ­nua, los dos intervalos cortan en x=128 aproximadamente
                            funcionT[x] = (byte) (255.0/Math.log(1.0+255.0)*Math.log(1.0+(double)x)-95.483);
                        }
                    }

                    // Imprimir los valores de la tabla (opcional)
                    System.out.println(Arrays.toString(funcionT));
                    
                    LookupTable tabla = new ByteLookupTable(0, funcionT);
                    LookupOp lop = new LookupOp(tabla, null);
                    BufferedImage imgdest = lop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_boton_oscurecer_zonas_clarasActionPerformed

    private void boton_duplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_duplicarActionPerformed
        // TODO add your handling code here:
        // Obtener la ventana interna activa
        VentanaInterna viActiva = (VentanaInterna) escritorio.getSelectedFrame();
        if (viActiva != null) {
            BufferedImage imgActiva = viActiva.getLienzo2D().getImage();
            if (imgActiva != null) {
                // Crear una nueva ventana interna
                VentanaInterna viNueva = new VentanaInterna();
                viNueva.setTitle("Copia de "+ viActiva.getTitle());
                escritorio.add(viNueva);
                viNueva.setVisible(true);

                // Crear una copia de la imagen de la ventana activa
                BufferedImage imgNueva = new BufferedImage(imgActiva.getWidth(), imgActiva.getHeight(), imgActiva.getType());
                Graphics2D g2d = imgNueva.createGraphics();
                g2d.drawImage(imgActiva, 0, 0, null);
                g2d.dispose();

                // Establecer la imagen en la nueva ventana interna
                viNueva.getLienzo2D().setImage(imgNueva);

                // Agregar listeners si es necesario
                viNueva.addInternalFrameListener(manejador_ventana_interna);
                viNueva.getLienzo2D().addLienzoListener(manejador);
            }
        }
    }//GEN-LAST:event_boton_duplicarActionPerformed

    private void boton_negativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_negativoActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            img = ImageTools.convertImageType(img, BufferedImage.TYPE_INT_ARGB);
            if(img!=null){
                try{
                    byte funcionT[] = new byte[256];
                    for (int x=0; x<256; x++)
                        funcionT[x] = (byte)(255-x); // Negativo
                    LookupTable tabla = new ByteLookupTable(0, funcionT);
                    LookupOp lop = new LookupOp(tabla, null);
                    BufferedImage imgdest = lop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_boton_negativoActionPerformed

    private void boton_mostrar_bandasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_mostrar_bandasActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if(img != null){
                // Extraer las bandas de la imagen
                int num_bandas = img.getRaster().getNumBands();
                for (int i = 0; i < num_bandas; i++) {
                    BufferedImage banda = getImageBand(img, i);
                    // Crear una ventana interna para cada banda y mostrarla
                    VentanaInterna ventana_banda = new VentanaInterna();
                    ventana_banda.getLienzo2D().setImage(banda);
                    ventana_banda.setTitle(vi.getTitle()+ " Banda " + i);
                    escritorio.add(ventana_banda);
                    ventana_banda.setVisible(true);
                }
            }
        }
    }//GEN-LAST:event_boton_mostrar_bandasActionPerformed

    private void lista_espacio_colorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lista_espacio_colorActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if(img!=null){
                ColorSpace cs = null;
                int seleccion = lista_espacio_color.getSelectedIndex();
                
                // Creamos ventana Interna
                VentanaInterna ventana_color = new VentanaInterna();
                
                boolean crear_imagen = false;
                
                if(!(img.getColorModel().getColorSpace() instanceof sm.image.color.GreyColorSpace)){
                    // Programamos el espacio de color a convertir
                    switch(seleccion){
                        case 0: //RGB
                            if(!img.getColorModel().getColorSpace().equals(ColorSpace.getInstance(ColorSpace.CS_sRGB))){
                                cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
                                ventana_color.setTitle(vi.getTitle()+" [RGB]");
                                crear_imagen = true;
                            }
                            break;
                        case 1: //YCC
                            // Al crear cs con ColorSpace.CS_PYCC, se aplica el tipo 13 "TYPE_Â·3CLR", no el "TYPE_YCbCr". AsÃ­ sÃ­ hace bien la comprobacÃ³n
                            if(img.getColorModel().getColorSpace().getType() != ColorSpace.TYPE_3CLR){  
                                cs = ColorSpace.getInstance(ColorSpace.CS_PYCC);
                                ventana_color.setTitle(vi.getTitle()+" [YCC]");
                                crear_imagen = true;
                            }
                            break;
                        case 2: //GREY
                            cs = new sm.image.color.GreyColorSpace();
                            ventana_color.setTitle(vi.getTitle()+" [GREY]");
                            crear_imagen = true;
                            break;
                        default:
                            break;
                    }
                }
                
                if(crear_imagen){
                    try{
                        ColorConvertOp op = new ColorConvertOp(cs, null);
                        BufferedImage imgdest = op.filter(img,null);

                        // AÃ±adimos la Imagen a la ventana

                        ventana_color.getLienzo2D().setImage(imgdest);
                        escritorio.add(ventana_color);
                        ventana_color.setVisible(true);

                    } catch(IllegalArgumentException e){
                        System.err.println(e.getLocalizedMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_lista_espacio_colorActionPerformed

    private void boton_combinar_bandasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_combinar_bandasActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if(img!=null){
                try{
                    float[][] matriz = {{0.0F, 0.5F, 0.5F},
                    {0.5F, 0.0F, 0.5F},
                    {0.5F, 0.5F, 0.0F}};
                    BandCombineOp bcop = new BandCombineOp(matriz, null);
                    bcop.filter(img.getRaster(), img.getRaster());
                    vi.getLienzo2D().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_boton_combinar_bandasActionPerformed

    private void band_combine_opActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_band_combine_opActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if(img!=null){
                try{
                    float[][] matriz = {{1.0F, 0.0F, 0.0F},
                    {0.0F, 0.0F, 1.0F},
                    {0.0F, 1.0F, 0.0F}};
                    BandCombineOp bcop = new BandCombineOp(matriz, null);
                    bcop.filter(img.getRaster(), img.getRaster());
                    vi.getLienzo2D().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_band_combine_opActionPerformed

    private void color_convert_opActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_color_convert_opActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if(img!=null){
                try{
                    ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                    ColorConvertOp op = new ColorConvertOp(cs, null);
                    BufferedImage imgdest = op.filter(img,null);
                    vi.getLienzo2D().setImage(imgdest);
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_color_convert_opActionPerformed
    
    private void aplicar_lookup_contraste(LookupTable tabla){
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            img = ImageTools.convertImageType(img, BufferedImage.TYPE_INT_ARGB);
            if(img!=null){
                try{
                    LookupOp lop = new LookupOp(tabla, null);
                    BufferedImage imgdest = lop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }
    
    
    private float[] crearFiltroCometa(int tam){
        float[] filtro = new float[tam];
        int centro = tam / 2;

        // Asignamos pesos decrecientes a medida que nos alejamos del centro
        for (int i = 0; i < tam; i++) {
            int distancia = i - centro;
            // Damos menos peso a los pÃ­xeles mÃ¡s alejados del central, teniendo en cuenta Ãºnicamente los pixeles situados a la derecha. Distancia >= 0
            if (distancia >= 0) {
                filtro[i] = 1.0f / (distancia + 1);
            } else {
                filtro[i] = 0.0f;
            }
        }

        // Normalizamos los pesos para asegurarnos de que sumen 1
        float sum = 0;
        for (int i = 0; i < tam; i++) {
            sum += filtro[i];
        }
        for (int i = 0; i < tam; i++) {
            filtro[i] /= sum;
        }

        return filtro;
    }
    
    private Kernel getKernel(int seleccion){
        Kernel k = null;
        switch(seleccion){
            case 0:
                k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                break;
            case 1:
                k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                break;
            case 2:
                k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                break;
            case 3: 
                k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                break;
            case 4:
                k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                break;
            case 5:
                float media_5x5 = 1.0f/25.0f; 
                float filtro5x5[] = {media_5x5, media_5x5, media_5x5, media_5x5, media_5x5,
                    media_5x5, media_5x5, media_5x5, media_5x5, media_5x5,
                    media_5x5, media_5x5, media_5x5, media_5x5, media_5x5,
                    media_5x5, media_5x5, media_5x5, media_5x5, media_5x5,
                    media_5x5, media_5x5, media_5x5, media_5x5, media_5x5};
                k = new Kernel(5, 5, filtro5x5);
                break;
            case 6:
                float media_7x7 = 1.0f/49.0f; 
                float filtro7x7[] = {media_7x7, media_7x7, media_7x7, media_7x7, media_7x7, media_7x7, media_7x7,
                    media_7x7, media_7x7, media_7x7, media_7x7, media_7x7, media_7x7, media_7x7,
                    media_7x7, media_7x7, media_7x7, media_7x7, media_7x7, media_7x7, media_7x7,
                    media_7x7, media_7x7, media_7x7, media_7x7, media_7x7, media_7x7, media_7x7,
                    media_7x7, media_7x7, media_7x7, media_7x7, media_7x7, media_7x7, media_7x7,
                    media_7x7, media_7x7, media_7x7, media_7x7, media_7x7, media_7x7, media_7x7,
                    media_7x7, media_7x7, media_7x7, media_7x7, media_7x7, media_7x7, media_7x7};
                k = new Kernel(7, 7, filtro7x7);
                break;
            case 7:
                // Ilumina porque la suma de los factores de la mÃ¡scara es mayor que 1. 2/9*9 > 1. Si fuese 1/9 el factor, la suma serÃ­a 1 y no iluminarÃ­a. 
                float emb_iluminado = 2.0f/9.0f;
                float filtro_reto2[] = {emb_iluminado, emb_iluminado, emb_iluminado, 
                    emb_iluminado, emb_iluminado, emb_iluminado, 
                    emb_iluminado, emb_iluminado, emb_iluminado};
                k = new Kernel(3, 3, filtro_reto2);
                break;
            case 8:
                // Para una mÃ¡scara 5x5, que tiene 25 factores, si queremos que ilumine, la suma debe ser superior que 1.
                // 1/25 en cada factor sumarÃ­a 1, no iluminando. BastarÃ­a con que el factor sea, por ejemplo 2/25, para que la suma sea superior a 1 e ilumine.
                float emb_iluminado_5x5 = 2.0f/25.0f;
                float filtro_reto2_5x5[] = {emb_iluminado_5x5, emb_iluminado_5x5, emb_iluminado_5x5, emb_iluminado_5x5, emb_iluminado_5x5,
                    emb_iluminado_5x5, emb_iluminado_5x5, emb_iluminado_5x5, emb_iluminado_5x5, emb_iluminado_5x5,
                    emb_iluminado_5x5, emb_iluminado_5x5, emb_iluminado_5x5, emb_iluminado_5x5, emb_iluminado_5x5,
                    emb_iluminado_5x5, emb_iluminado_5x5, emb_iluminado_5x5, emb_iluminado_5x5, emb_iluminado_5x5,
                    emb_iluminado_5x5, emb_iluminado_5x5, emb_iluminado_5x5, emb_iluminado_5x5, emb_iluminado_5x5};
                k = new Kernel(5, 5, filtro_reto2_5x5);
                break;
            default:
                break;
        }
        
        return k;
    }
    
    private Lienzo2D getSelectedLienzo() {
        VentanaInterna vi;
        vi = (VentanaInterna)escritorio.getSelectedFrame();
        return vi!=null ? vi.getLienzo2D() : null;
    }
    
    private BufferedImage getImageBand(BufferedImage img, int banda) {
        //Creamos el modelo de color de la nueva imagen basado en un espcio de color GRAY
        ColorSpace cs = new sm.image.color.GreyColorSpace();
        ComponentColorModel cm = new ComponentColorModel(cs, false, false,Transparency.OPAQUE,DataBuffer.TYPE_BYTE);
        //Creamos el nuevo raster a partir del raster de la imagen original
        int vband[] = {banda};
        WritableRaster bRaster = (WritableRaster)img.getRaster().createWritableChild(0,0,img.getWidth(), img.getHeight(),0,0,vband);
        //Creamos una nueva imagen que contiene como raster el correspondiente a la banda
        return new BufferedImage(cm, bRaster, false, null);
    }
    
    
    public class MiManejadorLienzo extends LienzoAdapter{
        @Override
        public void shapeAdded(LienzoEvent evt){
            System.out.println("Figura "+evt.getForma()+" aÃ±adida");
        }
    }
    
    private class ManejadorVentanaInterna extends InternalFrameAdapter{
        @Override
        public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt){
            VentanaInterna vi = (VentanaInterna) evt.getInternalFrame();
            
            boton_rellenar.setSelected(vi.getLienzo2D().getRelleno());
            boton_transparencia.setSelected(vi.getLienzo2D().getModo_transparencia());
            boton_alisado.setSelected(vi.getLienzo2D().getModo_alisado());
            slider_grosor.setValue(vi.getLienzo2D().getGrosor());
            
            HerramientaDibujo herramienta = vi.getLienzo2D().getHerramienta();
            if(herramienta != null){
                switch(herramienta){
                    case LINEA:
                        boton_linea.setSelected(true);
                        break;
                    case RECTANGULO:
                        boton_rectangulo.setSelected(true);
                        break;
                    case ELIPSE:
                        boton_elipse.setSelected(true);
                        break;
                    case FANTASMA:
                        boton_fantasma.setSelected(true);
                        break;
                    default:
                        break;
                }
            }
            else{
                boton_linea.setSelected(false);
                boton_rectangulo.setSelected(false);
                boton_elipse.setSelected(false);
                boton_fantasma.setSelected(false);
            }
            
            boton_edicion.setSelected(vi.getLienzo2D().getModo_edicion());
            boton_color.setBackground(vi.getLienzo2D().getColor());
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem abrir;
    private javax.swing.JMenuItem affine_transform_op;
    private javax.swing.JMenuItem band_combine_op;
    private javax.swing.JLabel barra_estado;
    private javax.swing.JToolBar barra_herramientas;
    private javax.swing.JToolBar barra_herramientas_inferior;
    private javax.swing.JButton boton_abrir;
    private javax.swing.JToggleButton boton_alisado;
    private javax.swing.JButton boton_color;
    private javax.swing.JButton boton_combinar_bandas;
    private javax.swing.JButton boton_contraste_iluminado;
    private javax.swing.JButton boton_contraste_normal;
    private javax.swing.JButton boton_contraste_oscurecido;
    private javax.swing.JButton boton_duplicar;
    private javax.swing.JToggleButton boton_edicion;
    private javax.swing.JToggleButton boton_elipse;
    private javax.swing.JToggleButton boton_fantasma;
    private javax.swing.JButton boton_guardar;
    private javax.swing.JButton boton_incrementar_escalado;
    private javax.swing.JToggleButton boton_linea;
    private javax.swing.JButton boton_mostrar_bandas;
    private javax.swing.JButton boton_negativo;
    private javax.swing.JButton boton_nuevo;
    private javax.swing.JButton boton_oscurecer_zonas_claras;
    private javax.swing.JToggleButton boton_rectangulo;
    private javax.swing.JButton boton_reducir_escalado;
    private javax.swing.JToggleButton boton_rellenar;
    private javax.swing.JButton boton_rotacion;
    private javax.swing.JToggleButton boton_transparencia;
    private javax.swing.JButton boton_volcado;
    private javax.swing.JSlider brillo;
    private javax.swing.JMenuItem color_convert_op;
    private javax.swing.JSlider cometa;
    private javax.swing.JSlider contraste;
    private javax.swing.JMenuItem convolve_op;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JMenuItem guardar;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JToolBar.Separator jSeparator8;
    private javax.swing.JLabel label_brillo;
    private javax.swing.JLabel label_cometa;
    private javax.swing.JLabel label_contraste;
    private javax.swing.JLabel label_transformacion_lineal;
    private javax.swing.JComboBox<String> lista_espacio_color;
    private javax.swing.JComboBox<String> lista_filtros;
    private javax.swing.JMenuItem lookup_op;
    private javax.swing.JMenu menu_archivo;
    private javax.swing.JMenu menu_imagen;
    private javax.swing.JMenuBar menu_superior;
    private javax.swing.ButtonGroup modo_dibujo;
    private javax.swing.JMenuItem nuevo;
    private javax.swing.JPanel panel_color;
    private javax.swing.JPanel panel_inferior;
    private javax.swing.JMenuItem rescale_op;
    private javax.swing.JSlider slider_grosor;
    private javax.swing.JSlider transformacion_lineal;
    // End of variables declaration//GEN-END:variables
}
