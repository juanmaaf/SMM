/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package practica4smm;

import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Composite;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.List;
import static practica4smm.HerramientaDibujo.ELIPSE;
import static practica4smm.HerramientaDibujo.LINEA;
import static practica4smm.HerramientaDibujo.RECTANGULO;

enum HerramientaDibujo {
    LINEA,
    RECTANGULO,
    ELIPSE
}

class MiLinea extends Line2D.Float {
    public MiLinea(Point2D p1, Point2D p2) {
        super(p1,p2);
    }
    public boolean isNear(Point2D p){
        if(this.getP1().equals(this.getP2())) return this.getP1().distance(p)<=2.0; //p1=p2
        return this.ptLineDist(p)<=2.0; // p1!=p2
    }
    @Override
        public boolean contains(Point2D p) {
        return isNear(p);
    }
        
    public void setLocation(Point2D pos){
        double dx=pos.getX()-this.getX1();
        double dy=pos.getY()-this.getY1();
        Point2D newp2 = new Point2D.Double(this.getX2()+dx,this.getY2()+dy);
        this.setLine(pos,newp2);
    }
}

class MiElipse extends Ellipse2D.Float {
    public MiElipse(float x, float y, float w, float h) {
        super(x,y, w, h);
    }
        
    public void setLocation(Point2D pos){
        setFrame(pos.getX(), pos.getY(), width, height);
    }
}

/**
 *
 * @author juanmaaf
 */
public class Lienzo extends javax.swing.JPanel {
    private List<Shape> vShape;
    
    private Color color;
    private boolean relleno;
    private Shape forma;
    private HerramientaDibujo herramienta;
    private Point punto_inicial;
    private boolean mover;
    private boolean modo_transparencia;
    private boolean modo_alisado;
    
    private Stroke stroke;
    private Composite transparencia;
    private RenderingHints alisado;
    
    /**
     * Creates new form Lienzo
     */
    public Lienzo() {
        initComponents();
        
        vShape = new ArrayList();
        //colores = new ArrayList();
        //rellenos = new ArrayList();
        
        color = Color.black;
        relleno = false;
        forma = null;
        punto_inicial = null;
        mover = false;
        
        stroke = new BasicStroke();
        alisado = new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        transparencia = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f);
        
        this.setBackground(Color.white);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 398, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 298, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
        if(mover){
            forma = figuraSeleccionada(evt.getPoint());
        }
        else{
            punto_inicial = evt.getPoint();
        
            switch (herramienta) {
                case LINEA:
                    forma = new MiLinea(punto_inicial, punto_inicial);
                    break;
                case RECTANGULO:
                    forma = new Rectangle(punto_inicial.x, punto_inicial.y, 0, 0);
                    break;
                case ELIPSE:
                    forma = new MiElipse(punto_inicial.x, punto_inicial.y, 0, 0);
                    break;
                default:
                    break;
            }
            vShape.add(forma);
            //colores.add(color);
            //rellenos.add(relleno);
        }
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
        // Comprobamos el tipo de forma
        if(mover && forma != null){
            //Código para el caso del rectángulo
            if (forma instanceof Rectangle)
                ((Rectangle)forma).setLocation(evt.getPoint());
            if (forma instanceof MiLinea)
                ((MiLinea)forma).setLocation(evt.getPoint());
            if (forma instanceof MiElipse)
                ((MiElipse)forma).setLocation(evt.getPoint());
        }
        else{
            if (forma instanceof Line2D) {
                Line2D line = (Line2D) forma;
                line.setLine(punto_inicial, evt.getPoint());
            } else if (forma instanceof Rectangle2D) {
                Rectangle rectangulo = (Rectangle) forma;
                rectangulo.setFrameFromDiagonal(punto_inicial.x, punto_inicial.y, evt.getX(), evt.getY());
            } else if (forma instanceof Ellipse2D) {
                MiElipse elipse = (MiElipse) forma;
                elipse.setFrameFromDiagonal(punto_inicial.x, punto_inicial.y, evt.getX(), evt.getY());
            }
        }
        repaint();
    }//GEN-LAST:event_formMouseDragged

    
    public Color getColor(){
        return color;
    }
    
    
    public boolean getRelleno(){
        return relleno;
    }
    
    public void setColor(Color c){
        color = c;
    }
    
    public void setRelleno(boolean r){
        relleno = r;
    }
    
    public HerramientaDibujo getHerramienta(){
        return herramienta;
    }
    
    public void setHerramienta(HerramientaDibujo h){
        herramienta = h;
    }
    
    public void setMover(boolean m){
        mover = m;
    }
    
    public boolean getMover(){
        return mover;
    }
    
    public Stroke getStroke() {
        return stroke;
    }

    public void setStroke(Stroke stroke) {
        this.stroke = stroke;
    }
    
    public void setTransparencia(Composite transparencia) {
        this.transparencia = transparencia;
    }

    public void setAlisado(RenderingHints alisado) {
        this.alisado = alisado;
    }
    
    public void setGrosor(int grosor) {
        this.stroke = new BasicStroke(grosor);
    }
    
    public void setModo_transparencia(boolean modo_transparencia) {
        this.modo_transparencia = modo_transparencia;
    }

    public void setModo_alisado(boolean modo_alisado) {
        this.modo_alisado = modo_alisado;
    }
    
   
    @Override
    public void paint(Graphics g) {
        super.paint(g);
        Graphics2D g2d = (Graphics2D) g;
        if(modo_transparencia){
            g2d.setComposite(transparencia);
        }
        if(modo_alisado){
            g2d.setRenderingHints(alisado);
        }
        g2d.setStroke(stroke);
        g2d.setColor(color);
        for(Shape s:vShape){
            if(relleno && !(s instanceof MiLinea)){ 
                g2d.fill(s);
            }
            else{
                g2d.draw(s);
            }
        }
    }
    
    private Shape figuraSeleccionada(Point2D p){
        for(Shape s:vShape)
        if(s.contains(p)) return s;
        return null;
    }
    
    public void borrarLienzo(){
        
        forma = null;
        repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
